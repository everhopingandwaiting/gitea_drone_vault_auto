version: "3.7"
services:
  gitea-server:
    image: gitea/gitea
    depends_on:
      - redis-server
      # - mysql-server
    container_name: gitea-server
    ports:
      - "${GITEA_DOMAIN_PORT}:${GITEA_DOMAIN_PORT}"
      - "10023:22"
    volumes:
      - ${BASE_PATH}/gitea:/data
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    environment:
      - TZ=Asia/Shanghai
      - RUN_MODE=dev
    restart: always
    networks:
      - git-network
    deploy:
      endpoint_mode: vip
      replicas: 1
      placement:
        constraints: [node.role == manager]

  minio-s3-server:
    image: minio/minio:edge
    container_name: minio-s3-server
    volumes:
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
      - ${BASE_PATH}/minio_s3:/data
      # default bucket maybe for drone
      - ${BASE_PATH}/minio_s3/drone:/never_to_be_used
    command: server /data
    ports:
      - "9009:9000"
    environment:
      - LANG=en_US.UTF-8
      - TZ=Asia/Shanghai
      - MINIO_REGION_NAME=my_region
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    restart: always
    networks:
      - git-network
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  drone-server:
    image: drone/drone
    depends_on:
      - gitea-server
    container_name: drone-server
    ports:
      - "5000:80"
    volumes:
      # - ${BASE_PATH}/drone_:/var/lib/drone
      - ${BASE_PATH}/drone_:/data
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    restart: always
    networks:
      - git-network
    environment:
      # s3
      - DRONE_S3_ENDPOINT=http://minio-s3-server:9000
      - DRONE_S3_PATH_STYLE=true
      - DRONE_S3_SKIP_VERIFY=true
      - DRONE_S3_PREFIX=logs
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - DRONE_S3_BUCKET=drone
      # - AWS_DEFAULT_REGION=us-east-1
      - AWS_REGION=my_region
      # jsonnet
      - DRONE_JSONNET_ENABLED=true
      - LANG=en_US.UTF-8
      # db
      - DRONE_DATABASE_DRIVER=${DB_TYPE}
      - DRONE_DATABASE_DATASOURCE=${DRONE_DATABASE_DATASOURCE}
      # GITEA CONFIG
      - DRONE_GITEA_SERVER=${GITEA_SERVER}
      - DRONE_SERVER_HOST=${DRONE_SERVER_HOST}
      - DRONE_AGENTS_ENABLED=true
      - DRONE_GITEA_CLIENT_ID=${DRONE_GITEA_CLIENT_ID}
      - DRONE_GITEA_CLIENT_SECRET=${DRONE_GITEA_CLIENT_SECRET}
      - TZ=Asia/Shanghai
      - DRONE_OPEN=true
      - DRONE_GIT_ALWAYS_AUTH=true
      - DRONE_RPC_SECRET=drone_secret_by_jyao
      # user
      - DRONE_USER_CREATE=username:jyao,admin:true
      # ssl
      - DRONE_GITEA_SKIP_VERIFY=true
      - DRONE_GITHUB_SKIP_VERIFY=true
      - DRONE_GOGS_SKIP_VERIFY=true
      - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO}
      - DRONE_VALIDATE_PLUGIN_SKIP_VERIFY=true
      - DRONE_WEBHOOK_SKIP_VERIFY=true
      # - DRONE_TLS_AUTOCERT=true
      # - DRONE_HTTP_SSL_REDIRECT=true
      # log
      - DRONE_LOGS_COLOR=true
      # cron
      - DRONE_CRON_INTERVAL=1h
      # cookie
      - DRONE_COOKIE_SECRET=bea26a2221fd8090ea38720fc445eca6
      - DRONE_STATUS_NAME=continuous-integration/drone
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  # vault
  vault-server:
    image: vault
    container_name: vault-server
    privileged: false
    command: ["server"]
    restart: always
    networks:
      - git-network
    tty: false
    cap_add:
      - IPC_LOCK
    volumes:
      # - ${BASE_PATH}/vault/logs:/vault/logs
      - ${BASE_PATH}/vault:/vault
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    # - ${BASE_PATH}/vault/config:/vault/config
    ports:
      - "8200:8200"
    environment:
      - LANG=en_US.UTF-8
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_TOKEN}
    # - VAULT_API_ADDR=http://0.0.0.0:8200
    # - SKIP_SETCAP=true
    # - VAULT_LOCAL_CONFIG='{backend: {file: {path: /vault/file}}, default_lease_ttl: 168h, max_lease_ttl: 720h}'
    # - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  drone-vault:
    image: drone/vault
    depends_on:
      - vault-server
    container_name: drone-vault
    volumes:
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    expose:
      - 3000
    environment:
      - LANG=en_US.UTF-8
      - DRONE_DEBUG=true
      - VAULT_TOKEN=${VAULT_TOKEN}
      - VAULT_ADDR=http://vault-server:8200
      - DRONE_SECRET=provide_drone_vault_token_key_by_jyao
      - TZ=Asia/Shanghai
    restart: always
    networks:
      - git-network
    deploy:
      replicas: 3
      placement:
        constraints: [node.role == worker]

  docker-runner:
    image: drone/drone-runner-docker
    depends_on:
      - drone-vault
    # container_name: docker-runner
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - LANG=en_US.UTF-8
      # vault config
      - DRONE_SECRET_PLUGIN_SKIP_VERIFY=true
      - DRONE_SECRET_PLUGIN_ENDPOINT=http://drone-vault:3000
      - DRONE_SECRET_PLUGIN_TOKEN=provide_drone_vault_token_key_by_jyao
      # runner config
      - DRONE_RPC_SKIP_VERIFY=true
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=drone-server
      - DRONE_RPC_SECRET=drone_secret_by_jyao
      - DRONE_RUNNER_CAPACITY=12
      - DRONE_RUNNER_NAME=ub-jy
      - DRONE_UI_USERNAME=${DRONE_UI_USERNAME}
      - DRONE_UI_PASSWORD=${DRONE_UI_PASSWORD}
      - DRONE_MEMORY_SWAP_LIMIT=500000000
      - TZ=Asia/Shanghai
      # just docker
      - DRONE_RUNNER_VOLUMES=/etc/docker/daemon.json:/etc/docker/daemon.json,/tmp/var/lib/docker:/var/lib/docker,/root/.m2:/root/.m2
      # other CONFIG
      - DRONE_RPC_DUMP_HTTP=true
      - DRONE_RPC_DUMP_HTTP_BODY=true
      - DRONE_TRACE=true
      - DRONE_DEBUG=true
    restart: always
    ports:
      - "3000"
    networks:
      - git-network
    deploy:
      replicas: 3
      placement:
        constraints: [node.role == worker]

  ssh-runner:
    image: drone/drone-runner-ssh
    depends_on:
      - drone-server
    environment:
      - LANG=en_US.UTF-8
      # vault config
      - DRONE_SECRET_PLUGIN_SKIP_VERIFY=true
      - DRONE_SECRET_PLUGIN_ENDPOINT=http://drone-vault:3000
      - DRONE_SECRET_PLUGIN_TOKEN=provide_drone_vault_token_key_by_jyao
      # runner config
      - DRONE_RPC_SKIP_VERIFY=true
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=drone-server
      - DRONE_RPC_SECRET=drone_secret_by_jyao
      - DRONE_RUNNER_CAPACITY=12
      - DRONE_RUNNER_NAME=ub-jy
      - DRONE_UI_USERNAME=${DRONE_UI_USERNAME}
      - DRONE_UI_PASSWORD=${DRONE_UI_PASSWORD}
      - DRONE_MEMORY_SWAP_LIMIT=500000000
      - TZ=Asia/Shanghai
      # other CONFIG
      - DRONE_RPC_DUMP_HTTP=true
      - DRONE_RPC_DUMP_HTTP_BODY=true
      - DRONE_TRACE=true
      - DRONE_DEBUG=true
    restart: always
    ports:
      - "3000"
    networks:
      - git-network
    deploy:
      replicas: 3
      placement:
        constraints: [node.role == worker]

  docker-registry:
    image: registry
    container_name: docker-registry
    volumes:
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    ports:
      - "5003:5000"
    environment:
      - LANG=en_US.UTF-8
      - TZ=Asia/Shanghai
    restart: always
    networks:
      - git-network
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == worker]

  redis-server:
    image: redis
    volumes:
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    environment:
      - LANG=en_US.UTF-8
      - TZ=Asia/Shanghai
    restart: always
    networks:
      - git-network
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == worker]

  adminer-server:
    image: adminer
    volumes:
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    environment:
      - TZ=Asia/Shanghai
    restart: always
    networks:
      - git-network
    ports:
      - 30088:8080
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == worker]

  nginx-server:
    image: nginx
    container_name: nginx-server
    depends_on:
      - docker-runner
      - ssh-runner
      - drone-server
    volumes:
      - ${BASE_PATH}/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ${BASE_PATH}/nginx:/opt
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    ports:
      - "80:80"
      - "443:443"
    environment:
      - TZ=Asia/Shanghai
    restart: always
    networks:
      - git-network
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
networks:
  git-network:
    # driver: overlay
# network_mode: overlay
